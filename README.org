* Introduction

Just a storage of the github locations of my emacs repositories.

To copy it yourself, simply:

|git clone --recursive https://github.com/orgcandman/emacs-plugins.git

* Setup

Here's the thing: I've tried to keep the configuration as minimal as possible 
(ie: leave things to the defaults) so that key bindings aren't totally foreign
to others, and so that the integration or extension can truly be custom. As 
such, I'm probably going to forget things, but the following lists all of the
known dependencies.

- autotools (libtool, and gperf to use the included gnu global tagging system)
- texinfo
- w3m

You _DEFINITELY_ need to run

=cd emacs-jabber && autoreconf -i && ./configure && make=

and

=cd doxymacs && ./bootstrap && ./configure && make=

AND

=cd magit && make lisp=

Post clone, you should probably run something like the following:

=find . -type f -name \*.el -exec emacs --batch --eval '(byte-compile-file "{}")' \;=

This should make your load time reasonable.

- Error 'Cannot find load file let-alist'
This occurs on systems which have Emacs 24.3 or earlier. Simply add the let-alist.el to your emacs load path (should be /usr/share/emacs/24.X/lisp/).

This package is complete with the ability to enable / disable various modes of
operation. IE: you can drop the C++ development package, and the 'social' modes
independently.

To do so, the following configuration variables are available, simply set them
to 'nil':

- simple-emacs-cxx-development
- simple-emacs-python-development
- simple-emacs-ruby-development
- simple-emacs-web-development
- simple-emacs-social-mode


** Basic development

- Git 1.7.0+ (used for magit, and you probably already have this... just for posterity)

  
** Python development

- Python 2.7+
- lxml
- jedi (pip install jedi)
- pyflakes (pip install pyflakes)
- virtualenv
- not sure if there are others, currently

** C++ development (which uses flymake)

- clang
- gnu make and makefiles /with the correct syntax-check target/ (if anyone knows how to eliminate this, please let me know)
- cppcheck
- GNU global (there's an included version for extreme happiness)

** Ruby development

- Ruby 1.9.2+

** Web development

- node.js (recent, please)
- jshint (npm install jshint ; then add jshint to your path)

* Info

The following lists any customizations and/or deviations included with this setup
** Basic Usage
The system is set up to do the following out-of-the-box:
1. Globally enable 'projectile' for faster navigation - all default bindings, but includes 'C-c f' to have a faster 'projectile-find-file' experience
2. Globally enable 'auto-complete' and 'yasnippets' (feel free to write a few good ones and store them in your snippets dir)
3. Set up a few nice defaults (including line numbering in specific modes)
4. Configure expand-region to be 'C-='
5. Configure magit-stats at 'C-c g s'
6. Narrowing / Widening is done via 'C-x n' (specific thanks to [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Artur Malabarba]])

** C++ Mode

- Uses spaces, set to 4, instead of tabs
- Does not use google mode (you can figure that out yourself, if you want it)
- Sets up a more intelligent compile (see the /simple-emacs-cxx-devel.el/ file) bound to 'C-c C-l'
- Automatically enables linum-mode
- Automatically tries to do flymake (including flymake-cppcheck)
*** GNU Global
I've included a link to the gnu-global repository. To use, do the following
: pushd /path/to/emacs-plugins/global
: chmod +x reconf.sh
: ./reconf.sh
: ./configure
: make

After that, set the =gtags-global-command= variable to =/path/to/emacs-plugins/global/global/global=

If you don't want to use the included version of gnu-global, add the following to your .emacs

: (setq simple-emacs-bundled-global nil)

An additional feature enabled is the ability to automatically 'tag' c/c++ sources. This can be 
enabled/disabled by setting the =simple-emacs-plugins-auto-run-gtags= to nil (disable) or t
(enable).

** Python Mode
Make sure to run =M-x jedi:install-server= before trying to use jedi.

** Ruby Mode
Ruby files should automatically enable =enh-ruby-mode= which provides a number of
nice features (including linting, completion, etc.). 
** Web mode

- js2refactor is 'C-c C-m <chord>' (see [[https://github.com/magnars/js2-refactor.el][JS2 Refactor Mode]] for more info)
- Tries to enable flymake for js
- Sets up nodejs interaction (using C-x C-e for region evaluation)
- Using the narrow-mode is a good way here of dropping just to js
